<!-- MainLayout.razor -->
@using Microsoft.Extensions.Logging
@using LightEditor2.RazorLib.Components.Shared


@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject LightEditor2.Core.Abstractions.IDialogService DialogService
@inject LightEditor2.Core.Services.CurrentStateService CurrentStateService
@implements IDisposable
@inject ILogger<MainLayout> Logger


<div class="page">
    <div class="sidebar bg-dark text-light">
        <NavMenu />
    </div>

    <main>
        
        
        <article class="bg-dark text-light p-3">
            @Body
        </article>
    </main>
    <NotificationDisplay />
</div>

@code {
    protected override void OnInitialized() // Nicht async, da nur Event registriert wird
    {
        // Abonnieren des globalen Zustandswechsels, um den Header neu zu rendern
        CurrentStateService.OnChange += OnCurrentStateChanged;
        Logger.LogDebug("MainLayout initialized, subscribed to CurrentStateService.OnChange");
    }

    private void OnCurrentStateChanged() // Methode statt Lambda
    {
        // Sicherstellen, dass UI-Updates im richtigen Thread passieren
        InvokeAsync(StateHasChanged);
        Logger.LogDebug("CurrentStateService.OnChange ausgelöst in MainLayout, StateHasChanged aufgerufen.");
    }

    // Dispose-Methode implementieren
    public void Dispose()
    {
        CurrentStateService.OnChange -= OnCurrentStateChanged;
        Logger.LogDebug("MainLayout disposed, unsubscribed from CurrentStateService.OnChange");
    }
}