
@inject LightEditor2.Core.Services.IProjectService ProjectService
@inject LightEditor2.Core.Services.ISubGroupService SubGroupService
@inject LightEditor2.Core.Services.ISettingService SettingService
@inject LightEditor2.Core.Services.CurrentStateService CurrentStateService
@inject LightEditor2.Core.Services.NotificationService NotificationService
@inject LightEditor2.Core.Abstractions.IDialogService DialogService
@inject LightEditor2.Core.Abstractions.IFolderPickerService FolderPickerService
@inject NavigationManager Navigation
@inject ILogger<NavMenu> Logger
@using LightEditor2.Core.Data
@using LightEditor2.Core.Abstractions

@using System.IO
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Logging




<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column bg-dark text-light p-3">

        <div class="nav-item">
            <div class="d-flex justify-content-between align-items-center mb-2">
                @* mb-2 für Abstand nach unten *@

                @* Linke Seite: Titel *@
                <h5 class="m-0">Projekte</h5> @* m-0 entfernt Standard-Margin für bessere Zentrierung *@

                @* Rechte Seite: Home-Button als Icon *@
                <a href="/"
                   class="btn btn-link text-light d-inline-flex align-items-center justify-content-center"
                   aria-label="Zur Startseite"
                   style="min-width: 1.5em; height: 1.5em; line-height: 1; padding: 0;">
                   
                    @* btn-link für Button-Anmutung ohne Rahmen, p-0 für kein Padding *@
                    <i class="bi bi-house-door-fill fs-5"></i> @* Bootstrap Icon, fs-5 für Größe *@
                </a>

            </div>
            <div class="list-group">
                @projectsFragment
            </div>
        </div>

    </nav>
</div>

@code {
    private List<LightEditor2.Core.Models.Project> projects = new();
    private RenderFragment? projectsFragment;

    private async Task LoadProjects()
    {
        projects = await ProjectService.GetProjectsAsync();
        projectsFragment = BuildProjectsFragment(projects);
        StateHasChanged();
    }

    private RenderFragment BuildProjectsFragment(List<LightEditor2.Core.Models.Project> projects) => builder =>
    {
        int seq = 0;
        if (projects == null || projects.Count == 0)
        {
            builder.OpenElement(seq++, "button");
            builder.AddAttribute(seq++, "class", "btn btn-dark");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, AddProject));
            builder.AddContent(seq++, "+ Projekt hinzufügen");
            builder.CloseElement();
        }
        else
        {
            foreach (var project in projects)
            {
                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "list-group-item bg-secondary text-light mb-2");

                builder.OpenElement(seq++, "div");
                builder.AddAttribute(seq++, "class", "d-flex justify-content-between align-items-center");

                builder.OpenElement(seq++, "span");
                builder.AddContent(seq++, project.Name);
                builder.CloseElement();

                builder.OpenElement(seq++, "button");
                    builder.AddAttribute(seq++, "class", "btn btn-sm btn-dark ms-2");
                    builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => AddSubGroup(project.Id)));
                    builder.AddContent(seq++, "+");
                builder.CloseElement();

                builder.CloseElement(); // Ende Kopfzeile

                if (project.SubGroups != null && project.SubGroups.Any())
                {
                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "subgroup-list ms-3 mt-2");
                    foreach (var subgroup in project.SubGroups)
                    {
                        builder.OpenComponent<Microsoft.AspNetCore.Components.Routing.NavLink>(seq++);
                        builder.AddAttribute(seq++, "class", "nav-link text-light");
                        builder.AddAttribute(seq++, "href", $"/slideeditor/{subgroup.Id}");
                        builder.AddAttribute(seq++, "ChildContent", (RenderFragment)((childBuilder) =>
                        {
                            childBuilder.AddContent(seq++, "- " + subgroup.Name);
                        }));
                        builder.CloseComponent();
                    }
                    builder.CloseElement();
                }
                else
                {
                    builder.OpenElement(seq++, "div");
                    builder.AddAttribute(seq++, "class", "text-muted ms-3 mt-2");
                    builder.AddContent(seq++, "Keine Untergruppen");
                    builder.CloseElement();
                }

                builder.CloseElement(); // Ende Projekt-Container
            }

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "list-group-item d-flex justify-content-between");

            // Button für Neues Projekt (links)
            builder.OpenElement(seq++, "button");
            builder.AddAttribute(seq++, "class", "btn btn-dark w-100");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, AddProject));
            builder.AddContent(seq++, "+");
            builder.CloseElement();

            // Roter Button zum Löschen der aktuellen Gruppe (rechts)
            builder.OpenElement(seq++, "button");
            builder.AddAttribute(seq++, "class", "btn btn-danger flex-fill");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, DeleteProjectDialog));
            builder.AddContent(seq++, "-");
            builder.CloseElement();
            builder.CloseElement();

            // Unterhalb des Plus-Buttons einen Export-Button hinzufügen:
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "list-group-item");
            builder.OpenElement(seq++, "button");
            builder.AddAttribute(seq++, "class", "btn btn-warning w-100"); // Farbe anpassen: btn-warning ist z.B. gelb/orange
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, ExportProjectDialogAsync));
            builder.AddContent(seq++, "Exportieren");
            builder.CloseElement();
            builder.CloseElement();


        }
    };

    private async Task AddProject()
    {
        string? projectName = await DialogService.ShowPromptAsync(
             title: "Neues Projekt",
             message: "Projektnamen:",
             accept: "OK",
             cancel: "Abbrechen",
             placeholder: "Bitte geben Sie den Projektnamen ein:",
             keyboardType: "Text"
        );

        if (!string.IsNullOrWhiteSpace(projectName))
        {
            var newProject = new LightEditor2.Core.Models.Project
                {
                    Name = projectName,
                // SubGroups werden automatisch initialisiert (siehe Modell)
                };

            // Aufruf anpassen und Ergebnis prüfen
            bool success = await ProjectService.AddProjectAsync(newProject);

            if (success)
            {
                Logger.LogInformation("Projekt '{ProjectName}' hinzugefügt, lade Projekte neu.", projectName);
                await LoadProjects(); // Lade Projekte neu (oder füge nur das neue hinzu für bessere Performance)
                // StateHasChanged(); // Wird durch LoadProjects ausgelöst
            }
            else
            {
                Logger.LogError("Fehler beim Hinzufügen des Projekts '{ProjectName}'.", projectName);
                // Fehlermeldung für den Benutzer anzeigen
                await DialogService.ShowAlertAsync("Fehler", "Das Projekt konnte nicht hinzugefügt werden.", "OK");
            }
        }
    }

    private async Task AddSubGroup(int projectId)
    {
        string? subgroupName = await DialogService.ShowPromptAsync(
        title: "Neue Untergruppe",
        message: "Bitte geben Sie den Namen der Untergruppe ein:",
        accept: "OK",
        cancel: "Abbrechen");

        if (!string.IsNullOrWhiteSpace(subgroupName))
        {
            var newSubgroup = new LightEditor2.Core.Models.SubGroup
                {
                    Name = subgroupName,
                    ProjectId = projectId
                // Slides werden im Modell initialisiert
                };

            // Aufruf anpassen und Ergebnis prüfen
            bool success = await SubGroupService.AddSubGroupAsync(newSubgroup);

            if (success)
            {
                Logger.LogInformation("SubGroup '{SubgroupName}' zu Projekt ID {ProjectId} hinzugefügt.", subgroupName, projectId);
                // Projektliste neu laden, um die neue SubGroup anzuzeigen
                await LoadProjects();
                // StateHasChanged(); // Wird durch LoadProjects ausgelöst
            }
            else
            {
                Logger.LogError("Fehler beim Hinzufügen der SubGroup '{SubgroupName}' zu Projekt ID {ProjectId}.", subgroupName, projectId);
                await DialogService.ShowAlertAsync("Fehler", "Die Untergruppe konnte nicht hinzugefügt werden.", "OK");
            }
        }
    }

    private async Task DeleteProjectDialog()
    {
        var projects = await ProjectService.GetProjectsAsync(); // Lädt jetzt mit Logging/Fehlerbehandlung im Service
        if (projects == null || !projects.Any())
        {
            await DialogService.ShowAlertAsync("Info", "Keine Projekte zum Löschen vorhanden.", "OK");
            return;
        }

        var options = projects.Select(p => p.Name).ToArray();
        var action = await DialogService.ShowActionSheetAsync(
            "Lösche Projekt...",  // title
            "Abbrechen",          // cancel
            null,                 // destruction (kein destruktiver Button hier nötig)
            options
        );

        if (string.IsNullOrEmpty(action)) // Sicherstellen, dass eine Auswahl getroffen wurde
        {
            Logger.LogInformation("Projektlöschung abgebrochen.");
            return;
        }

        var projectToDelete = projects.FirstOrDefault(p => p.Name == action);
        if (projectToDelete != null)
        {
            bool confirm = await DialogService.ShowConfirmationAsync(
                "Projekt löschen",
                $"Möchten Sie das Projekt '{projectToDelete.Name}' wirklich löschen? Alle zugehörigen Untergruppen und Slides werden ebenfalls gelöscht (wegen Cascade Delete).",
                "Ja",  
                "Nein" 
            );

            if (confirm)
            {
                // Aufruf anpassen und Ergebnis prüfen
                bool success = await ProjectService.DeleteProjectAsync(projectToDelete.Id);

                if (success)
                {
                    Logger.LogInformation("Projekt '{ProjectName}' (ID: {ProjectId}) gelöscht.", projectToDelete.Name, projectToDelete.Id);
                    CurrentStateService.NotifyStateChanged(); // Benachrichtigt andere Teile (z.B. Header)
                    await LoadProjects(); // Liste neu laden
                    //await DialogService.ShowAlertAsync("Erfolg", $"Das Projekt '{projectToDelete.Name}' wurde gelöscht.", "OK"); // Erfolgsmeldung
                    NotificationService.ShowMessage($"Status: Projekt '{projectToDelete.Name}' wurde gelöscht.");
                }
                else
                {
                    Logger.LogError("Fehler beim Löschen des Projekts '{ProjectName}' (ID: {ProjectId}).", projectToDelete.Name, projectToDelete.Id);
                    // Fehlermeldung für den Benutzer anzeigen
                    await DialogService.ShowAlertAsync("Fehler", $"Das Projekt '{projectToDelete.Name}' konnte nicht gelöscht werden.", "OK");
                }
            }
        }
        else
        {
            Logger.LogWarning("Ausgewähltes Projekt '{Action}' zum Löschen nicht in der Liste gefunden.", action);
            // Optional: Fehlermeldung
            await DialogService.ShowAlertAsync("Fehler", "Das ausgewählte Projekt wurde nicht gefunden.", "OK");
        }
    }

    // Beispielmethode zum Öffnen des Exportdialogs
    private async Task ExportProjectDialogAsync()
    {
        // Alle Projekte laden
        var projects = await ProjectService.GetProjectsAsync();
        if (projects == null || !projects.Any())
        {
            await DialogService.ShowAlertAsync("Export", "Keine Projekte vorhanden.", "OK");
            return;
        }

        // Erstellen Sie ein Array mit den Projektnamen als Auswahloptionen
        var options = projects.Select(p => p.Name).ToArray();

        // Zeigen Sie das ActionSheet an; "Abbrechen" ist die Abbruchoption
        var selected = await DialogService.ShowActionSheetAsync(
            "Zu Exportierendes Projekt...",
            "Abbrechen",
            null,
            options);

        if (string.IsNullOrEmpty(selected))
        {
            Logger.LogInformation("Exportierung abgebrochen.");
            return;
        }

        // Suchen Sie das Projekt, das zum ausgewählten Namen passt
        var projectToExport = projects.FirstOrDefault(p => p.Name == selected);
        if (projectToExport != null)
        {
            await ExportProjectAsync(projectToExport);
        }
    }

    private async Task ExportProjectAsync(LightEditor2.Core.Models.Project project)
    {
        if (project == null)
        {
            NotificationService.ShowMessage("Fehler: Kein Projekt zum Exportieren ausgewählt.");
            return;
        }
        Logger.LogInformation("Export für Projekt '{ProjectName}' (ID: {ProjectId}) wird vorbereitet...", project.Name, project.Id);

        // Ladeanzeige starten (optional, wenn Sie _isBusy verwenden)
        // _isBusy = true; StateHasChanged();

        string? exportFolder = null;
        bool pathSelectedManually = false; // Flag, ob Pfad gerade ausgewählt wurde

        try
        {
            // 1. Gespeicherten Pfad abrufen
            exportFolder = await SettingService.GetSettingAsync(SettingKeys.ExportPath);
            Logger.LogDebug("Gespeicherter Exportpfad: {Path}", exportFolder ?? "Nicht gesetzt");

            // 2. Wenn kein Pfad gespeichert ist, den Benutzer fragen (Logik für Punkt 4)
            if (string.IsNullOrWhiteSpace(exportFolder))
            {
                Logger.LogInformation("Kein Exportpfad gesetzt, Benutzer wird zur Auswahl aufgefordert.");
                // --- Verwende Abstraktion für FolderPicker ---
                AppFolderPickerResult folderResult = await FolderPickerService.PickFolderAsync(default); // CancellationToken.None

                if (folderResult.IsSuccessful && folderResult.Path != null)
                {
                    exportFolder = folderResult.Path;
                    pathSelectedManually = true; // Merken, dass Pfad gerade gewählt wurde
                    Logger.LogInformation("Benutzer hat Exportpfad ausgewählt: {Path}", exportFolder);

                    // Gewählten Pfad auch gleich speichern für die Zukunft
                    bool saveSuccess = await SettingService.SetSettingAsync(SettingKeys.ExportPath, exportFolder);
                    if (!saveSuccess)
                    {
                        // Optional: Fehlermeldung, wenn das Speichern des Pfades fehlschlägt
                        Logger.LogWarning("Der neu ausgewählte Exportpfad konnte nicht gespeichert werden.");
                        // Der Export wird trotzdem versucht, da der Pfad ja gewählt wurde.
                    }
                }
                else
                {
                    // Benutzer hat abgebrochen oder Fehler
                    NotificationService.ShowMessage($"Export abgebrochen: Kein Ordner ausgewählt. ({folderResult.Exception?.Message})");
                    Logger.LogWarning("Ordnerauswahl für Export fehlgeschlagen oder abgebrochen. Fehler: {Exception}", folderResult.Exception);
                    return; // Export abbrechen
                }
            }

            // --- Sicherstellen, dass benötigte Daten geladen sind (WICHTIG!) ---
            // Wenn LoadProjects() im NavMenu NICHT mehr SubGroups/Slides per Include lädt,
            // müssen Sie das spezifische Projekt hier nachladen!
            // Beispiel (nur ausführen, wenn nötig):
            if (project.SubGroups == null || !project.SubGroups.Any() || project.SubGroups.Any(sg => sg.Slides == null))
            {
                Logger.LogInformation("Lade Projektdetails für Export nach...");
                var loadedProject = await ProjectService.GetProjectByIdAsync(project.Id); // Annahme: GetProjectById lädt jetzt auch Slides oder wir passen es an.
                if (loadedProject != null)
                {
                    project = loadedProject; // Ersetze das übergebene Projekt durch das frisch geladene mit Details
                }
                else
                {
                    NotificationService.ShowMessage($"Fehler: Projektdetails (ID: {project.Id}) konnten nicht geladen werden.");
                    return; // Export abbrechen
                }
            }
            // --------------------------------------------------------------------

            // 3. JSON Daten vorbereiten
            var exportData = new
            {
                project.Id,
                project.Name,
                SubGroups = project.SubGroups?.Select(s => new
                {
                    s.Id,
                    s.Name,
                    Slides = s.Slides?.Select(sl => new
                    {
                        sl.Id,
                        sl.Title,
                        sl.Content,
                        sl.Prompt
                        // Keine Referenz auf SubGroup hier, passt zu WithOne()
                    }) ?? Enumerable.Empty<object>() // Sicherstellen, dass Slides nie null ist
                }) ?? Enumerable.Empty<object>() // Sicherstellen, dass SubGroups nie null ist
            };
            var jsonOptions = new JsonSerializerOptions
                {
                    WriteIndented = true,
                // ReferenceHandler.Preserve ist hier für den Einzelexport nicht nötig (und pot. verwirrend)
                // ReferenceHandler = ReferenceHandler.Preserve
                };
            var json = JsonSerializer.Serialize(exportData, jsonOptions);


            // 4. Dateinamen generieren
            var now = DateTime.Now;
            string timestamp = now.ToString("yyyy-MM-dd_HHmmss");
            // Sichereren Weg zur Dateinamenbereinigung verwenden
            string safeName = string.Join("_", project.Name.Split(Path.GetInvalidFileNameChars()));
            if (string.IsNullOrWhiteSpace(safeName)) safeName = "Export"; // Fallback
            string fileName = $"{safeName}_{timestamp}.json";


            // 5. Vollständigen Pfad erstellen
            string filePath = Path.Combine(exportFolder, fileName);
            Logger.LogInformation("Exportiere nach: {FilePath}", filePath);


            // 6. JSON in Datei schreiben
            await File.WriteAllTextAsync(filePath, json);

            // 7. Rückmeldung anzeigen
            if (pathSelectedManually)
            {
                NotificationService.ShowMessage($"Status: Pfad gesetzt und Projekt '{project.Name}' exportiert nach '{filePath}'.");
            }
            else
            {
                NotificationService.ShowMessage($"Status: Projekt '{project.Name}' exportiert nach '{filePath}'.");
            }
            Logger.LogInformation("Projekt '{ProjectName}' erfolgreich exportiert.", project.Name);

        }
        catch (UnauthorizedAccessException uaEx)
        {
            Logger.LogError(uaEx, "Fehler beim Export: Keine Berechtigung zum Schreiben in Ordner '{ExportFolder}'.", exportFolder);
            await DialogService.ShowAlertAsync("Fehler", $"Keine Berechtigung zum Schreiben in den Ordner:\n{exportFolder}\n\nWählen Sie ggf. einen anderen Ordner.", "OK");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unerwarteter Fehler beim Exportieren von Projekt '{ProjectName}'.", project.Name);
            await DialogService.ShowAlertAsync("Fehler", "Ein unerwarteter Fehler ist beim Exportieren aufgetreten.", "OK");
        }
        finally
        {
            // Ladeanzeige beenden (optional)
            // _isBusy = false; StateHasChanged();
        }
    }

    // WICHTIG: Event-Handler abmelden! (Behandelt Kritischen Punkt 2 teilweise)
    public void Dispose() // Implementieren, falls nicht vorhanden
    {
        CurrentStateService.OnChange -= OnCurrentStateChanged; // Sicherstellen, dass der Handler abgemeldet wird
        Logger.LogDebug("NavMenu disposed, unsubscribed from CurrentStateService.OnChange");
    }

    // Kleine Anpassung an OnInitializedAsync für Dispose
    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
        CurrentStateService.OnChange += OnCurrentStateChanged; // Methode statt Lambda verwenden
    }

    // Eigene Methode statt Lambda, um das Abmelden zu erleichtern
    private async void OnCurrentStateChanged()
    {
        await InvokeAsync(async () =>
        {
            Logger.LogDebug("CurrentStateService.OnChange ausgelöst in NavMenu, lade Projekte.");
            await LoadProjects();
            // StateHasChanged(); // Wird in LoadProjects() aufgerufen
        });
    }

}
