@page "/"
@inject LightEditor2.Core.Services.AppInfoService AppInfoService
@inject LightEditor2.Core.Services.IDataManagementService DataManagementService
@inject LightEditor2.Core.Services.NotificationService NotificationService
@inject ILogger<Home> Logger 
@inject NavigationManager Navigation 
@inject LightEditor2.Core.Services.CurrentStateService CurrentStateService
@using CommunityToolkit.Maui.Storage
@using Microsoft.Extensions.Logging
@using System.Text.Json 
@using LightEditor2.Core.Models
@using System.Text.Json.Serialization
@using Microsoft.Maui.Storage


<h1>Willkommen zu meinem LightEditor</h1>

<p>
    Version: @AppInfoService.DisplayVersion 
</p>

<h2>Datenverwaltung</h2>
<div class="mt-3 mb-3">
    <button class="btn btn-info me-2" @onclick="HandleExportAllData" disabled="@_isBusy">
        @if (_isBusy)
        {
            <span class="spinner-border spinner-border-sm me-1"></span>
        }
        Alle Daten exportieren...
    </button>
    <button class="btn btn-warning" @onclick="HandleImportData" disabled="@_isBusy">
        @if (_isBusy)
        {
            <span class="spinner-border spinner-border-sm me-1"></span>
        }
        Daten importieren...
    </button>
</div>
<p class="text-danger">
    <small>Achtung: Der Import löscht alle aktuell vorhandenen Daten unwiderruflich!</small>
</p>

@code {
    
    private bool _isBusy = false; // Für Ladeanzeige in Buttons

    private async Task HandleExportAllData()
    {
        _isBusy = true;
        Logger.LogInformation("Exportvorgang gestartet.");
        try
        {
            var projects = await DataManagementService.GetAllDataForExportAsync();

            if (projects == null)
            {
                await Application.Current.MainPage.DisplayAlert("Fehler", "Daten für Export konnten nicht geladen werden.", "OK");
                return;
            }

            if (!projects.Any())
            {
                NotificationService.ShowMessage("Status: Keine Daten zum Exportieren vorhanden.");
                return;
            }


            var options = new JsonSerializerOptions
                {
                    WriteIndented = true, // Macht die Datei lesbarer
                    ReferenceHandler = ReferenceHandler.Preserve // Sicherstellen, dass Beziehungen korrekt behandelt werden
                };
            string jsonString = JsonSerializer.Serialize(projects, options);

            // Dateinamen mit Zeitstempel vorschlagen
            string suggestedName = $"EditorDataExport_{DateTime.Now:yyyyMMdd_HHmmss}.json";

            // FileSaver verwenden (jetzt verfügbar durch das Toolkit)
            using var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(jsonString));

            // FileSaver zum Speichern anbieten
            var fileSaverResult = await FileSaver.Default.SaveAsync(suggestedName, stream, default); // CancellationToken.None
            

            if (fileSaverResult.IsSuccessful)
            {
                NotificationService.ShowMessage($"Status: Daten erfolgreich exportiert nach '{fileSaverResult.FilePath ?? suggestedName}'.");
                Logger.LogInformation("Daten erfolgreich exportiert nach: {FilePath}", fileSaverResult.FilePath);
            }
            else
            {
                NotificationService.ShowMessage($"Fehler: Export fehlgeschlagen oder abgebrochen. Grund: {fileSaverResult.Exception?.Message ?? "Unbekannt"}");
                Logger.LogWarning("Dateiexport fehlgeschlagen oder abgebrochen. Fehler: {Exception}", fileSaverResult.Exception);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unerwarteter Fehler beim Exportvorgang.");
            await Application.Current.MainPage.DisplayAlert("Fehler", "Ein unerwarteter Fehler ist beim Exportieren aufgetreten.", "OK");
        }
        finally
        {
            _isBusy = false; // Ladeanzeige beenden
        }
    }

    private async Task HandleImportData()
    {
        // --- SEHR WICHTIGE WARNUNG ---
        bool confirm = await Application.Current.MainPage.DisplayAlert(
            "Daten importieren - WARNUNG!",
            "Dieser Vorgang löscht ALLE aktuell in der Anwendung gespeicherten Projekte, Untergruppen und Slides unwiderruflich.\n\nMöchten Sie fortfahren und eine Importdatei auswählen?",
            "Ja, Import starten", // Bestätigung
            "Nein, Abbrechen"      // Abbruch
        );

        if (!confirm)
        {
            NotificationService.ShowMessage("Import abgebrochen.");
            return;
        }

        _isBusy = true; // Ladeanzeige starten
        Logger.LogInformation("Importvorgang gestartet.");

        try
        {
            var options = new PickOptions
                {
                    PickerTitle = "JSON-Importdatei auswählen",
                // Definiert erlaubte Dateitypen (passen Sie dies bei Bedarf an)
                    FileTypes = new FilePickerFileType(
                        new Dictionary<DevicePlatform, IEnumerable<string>>
                        {
                        { DevicePlatform.WinUI, new[] { ".json" } }, // Windows
                        { DevicePlatform.macOS, new[] { "json" } }, // macOS (UTType)
                        { DevicePlatform.iOS, new[] { "public.json" } }, // iOS (UTI)
                        { DevicePlatform.Android, new[] { "application/json" } }, // Android (MIME type)
                        }),
                };

            // FilePicker verwenden (Benötigt using Microsoft.Maui.Storage;)
            var result = await FilePicker.PickAsync(options);
            if (result != null)
            {
                if (result.FileName.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
                {
                    Logger.LogInformation("Importdatei ausgewählt: {FilePath}", result.FullPath);
                    string jsonContent = await File.ReadAllTextAsync(result.FullPath);

                    if (string.IsNullOrWhiteSpace(jsonContent))
                    {
                        await Application.Current.MainPage.DisplayAlert("Fehler", "Die ausgewählte Datei ist leer.", "OK");
                        return;
                    }

                    bool importSuccess = await DataManagementService.ImportAllDataAsync(jsonContent);

                    if (importSuccess)
                    {
                        NotificationService.ShowMessage("Status: Daten erfolgreich importiert!");
                        Logger.LogInformation("Datenimport erfolgreich.");
                        // --- UI Aktualisieren ---
                        // Benachrichtige andere Teile (NavMenu), dass sich alles geändert hat
                        CurrentStateService.NotifyStateChanged();
                        // Navigiere zur Startseite, um Neuladen zu erzwingen (oder andere Methode)
                        Navigation.NavigateTo("/", forceLoad: true);
                    }
                    else
                    {
                        Logger.LogError("Fehler im DataManagementService beim Importieren der Daten.");
                        await Application.Current.MainPage.DisplayAlert("Importfehler", "Die Daten konnten nicht importiert werden. Prüfen Sie das Dateiformat und die Logs.", "OK");
                    }
                }
                else
                {
                    Logger.LogWarning("Ungültiger Dateityp für Import ausgewählt: {FileName}", result.FileName);
                    await Application.Current.MainPage.DisplayAlert("Fehler", "Bitte wählen Sie eine gültige .json-Datei aus.", "OK");
                }
            }
            else
            {
                // Benutzer hat den Picker abgebrochen
                Logger.LogInformation("Dateiauswahl für Import abgebrochen.");
                NotificationService.ShowMessage("Import abgebrochen.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unerwarteter Fehler beim Importvorgang.");
            await Application.Current.MainPage.DisplayAlert("Fehler", "Ein unerwarteter Fehler ist beim Importieren aufgetreten.", "OK");
        }
        finally
        {
            _isBusy = false; // Ladeanzeige beenden
        }
    }
}